# Copyright (c) 2012, Mauro Scomparin
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Mauro Scomparin nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Mauro Scomparin ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Mauro Scomparin BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# File:			Makefile.
# Author:		Mauro Scomparin <http://scompoprojects.worpress.com>.
# Version:		1.0.0.
# Description:	Sample makefile.

#==============================================================================
#           Cross compiling toolchain / tools specifications
#==============================================================================

# Prefix for the arm-eabi-none toolchain.
# I'm using codesourcery g++ lite compilers available here:
# http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition/
PREFIX_ARM = arm-none-eabi

# Project name

PROJECT_NAME = main

STM32F4_PERIPH_PATH=../STM32F4-Discovery_FW_V1.1.0
STM32F4_PERIPH_DRIVER_PATH=${STM32F4_PERIPH_PATH}/Libraries/STM32F4xx_StdPeriph_Driver/src
STM32F4_INIT_BUILD_PATH=${STM32F4_PERIPH_PATH}/Libraries/CMSIS/ST/STM32F4xx/Source/Templates/gcc_ride7
# Microcontroller properties.
CPU=-mcpu=cortex-m4
ARCH=-march=armv7-m
FPU=-mfpu=fpv4-sp-d16 -mfloat-abi=hard
# Program name definition for ARM GNU C compiler.
CC      = ${PREFIX_ARM}-gcc
# Program name definition for ARM GNU CPP compiler.
CXX     = ${PREFIX_ARM}-g++
# Program name definition for ARM GNU assembler.
AS      = ${PREFIX_ARM}-as
# Program name definition for ARM GNU Linker.
LD      = ${PREFIX_ARM}-ld
# Program name definition for ARM GNU Object copy.
CP      = ${PREFIX_ARM}-objcopy
# Program name definition for ARM GNU Object dump.
OD      = ${PREFIX_ARM}-objdump

# Option arguments for C compiler.
#CFLAGS=-mthumb ${CPU} ${FPU} -O0 -ffunction-sections -fdata-sections -MD -c -g -DTRACEFIFO
#CFLAGS=-mthumb ${CPU} ${FPU} -O0 -ffunction-sections -fdata-sections -MD -c -g
CFLAGS=-mthumb ${CPU} ${FPU} -O2 -ffunction-sections -fdata-sections -MD -c -g

# Library stuff passed as flags!
CFLAGS+= -I. -c -Dgcc
CFLAGS+= -I${STM32F4_PERIPH_PATH}/Libraries/CMSIS/ST/STM32F4xx/Include
CFLAGS+= -I${STM32F4_PERIPH_PATH}/Utilities/STM32F4-Discovery
CFLAGS+= -I${STM32F4_PERIPH_PATH}/Libraries/CMSIS/Include
CFLAGS+= -I${STM32F4_PERIPH_PATH}/Libraries/STM32F4xx_StdPeriph_Driver/inc
#CFLAGS+= -DSPEEDUP
#CFLAGS+= -DTRACE_FIFO

AFLAGS+= ${CPU} ${ARCH} ${FPU} 

# Option arguments for CPP compiler.
CXXFLAGS=-mthumb ${CPU} ${FPU} -O0 -ffunction-sections -fdata-sections -MD -Wall -pedantic -c -g
# Library stuff passed as flags!
CXXFLAGS+= -c 

# Flags for LD
#LFLAGS  = --gc-sections
LFLAGS  = --gc-sections -Map=$(PROJECT_NAME).map --cref

# Flags for objcopy
CPFLAGS = -Obinary

# flags for objectdump
ODFLAGS = -d

# I want to save the path to libgcc, libc.a and libm.a for linking.
# I can get them from the gcc frontend, using some options.
# See gcc documentation
LIB_GCC_PATH=${shell ${CC} ${CFLAGS} -print-libgcc-file-name}
LIBC_PATH=${shell ${CC} ${CFLAGS} -print-file-name=libc.a}
LIBM_PATH=${shell ${CC} ${CFLAGS} -print-file-name=libm.a}
LIBS = ${STM32F4_PERIPH_DRIVER_PATH}/libstm32f4-periph-cm4f.a 
LIBS+= ${STM32F4_INIT_BUILD_PATH}/libstm32f4-init-cm4f.a 

#==============================================================================
#                         Project properties
#==============================================================================

# Project name (W/O .c extension eg. "main")
PROJECT_NAME = main
# Linker file name
LINKER_FILE = stm32_flash.ld

SRC = $(wildcard *.c)
OBJS = $(SRC:.c=.o)

ASRC = $(wildcard *.s)
AOBJS = $(ASRC:.s=.o)

#==============================================================================
#                      Rules to make the target
#==============================================================================

all: $(OBJS) $(AOBJS) ${PROJECT_NAME}.axf ${PROJECT_NAME}

%.o: %.c
	@echo
	@echo Compiling $<...
	$(CC) -c $(CFLAGS) ${<} -o ${@}

%.o: %.C
	@echo
	@echo Compiling $<...
	$(CXX) -c $(CXXFLAGS) ${<} -o ${@}

%.o: %.s
	@echo
	@echo Compiling $<...
	$(AS) -c $(AFLAGS) ${<} -o ${@}

${PROJECT_NAME}.axf: $(OBJS) $(AOBJS)
	@echo
	@echo Making driverlib
	$(MAKE) -C ${STM32F4_PERIPH_DRIVER_PATH}
	@echo Making init
	$(MAKE) -C ${STM32F4_INIT_BUILD_PATH}
	@echo
	@echo Linking...
	$(LD) -T $(LINKER_FILE) $(LFLAGS) -o $@ $(AOBJS) $(OBJS) $(LIBS) $(LIBM_PATH) $(LIBC_PATH) $(LIB_GCC_PATH)

${PROJECT_NAME}: ${PROJECT_NAME}.axf
	@echo
	@echo Copying...
	$(CP) $(CPFLAGS) ${PROJECT_NAME}.axf ${PROJECT_NAME}.bin
	@echo
	@echo Creating list file...
	$(OD) $(ODFLAGS) ${PROJECT_NAME}.axf > ${PROJECT_NAME}.lst
	$(OD) -s ${PROJECT_NAME}.axf > ${PROJECT_NAME}.dmp
	arm-none-eabi-nm -an ${PROJECT_NAME}.axf > ${PROJECT_NAME}.nm
